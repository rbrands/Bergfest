@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@using Blazored.TextEditor
@implements IDisposable
@inject AppState AppStateStore
@inject BackendApiRepository Api

@if (!_editMode)
{
    @if (!String.IsNullOrEmpty(_article?.ArticleText))
    {
        @if (!String.IsNullOrEmpty(_article.ImageLink))
        {
            <img src="@_article.ImageLink" alt="Header-Image" class="img-fluid float-end m-3 mb-0" style="max-height:@ImageMaxHeight" />
        }
        @((MarkupString)_article.ArticleText)
    }
    else
    {
        @ChildContent
    }
    <AuthorizeView Roles="admin">
        <Authorized>
            <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => SwitchToEditMode())"><span class="oi oi-pencil"></span></button>
        </Authorized>
    </AuthorizeView>
}
else
{
    <BlazoredTextEditor @ref="_htmlArticle" Placeholder="Artikel-Text">
        <ToolbarContent>
           <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <select class="ql-font">
                    <option selected=""></option>
                    <option value="serif"></option>
                    <option value="monospace"></option>
                </select>
                <select class="ql-size">
                    <option value="small"></option>
                    <option selected=""></option>
                    <option value="large"></option>
                    <option value="huge"></option>
                </select>
            </span>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
                <button class="ql-indent" value="-1"></button>
                <button class="ql-indent" value="+1"></button>
                <select class="ql-align">
                    <option selected=""></option>
                    <option value="center"></option>
                    <option value="right"></option>
                    <option value="justify"></option>
                </select>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
        </ToolbarContent>
        <EditorContent>
            @if (null != _article?.ArticleText)
            {
                @((MarkupString)_article.ArticleText)
            }
            else
            {
                @ChildContent
            }
        </EditorContent>
    </BlazoredTextEditor>
    <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => SaveArticle())"><span class="oi oi-check" title="Speichern"></span></button>
    <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => Cancel())"><span class="oi oi-x" title="Abbrechen"></span></button>
    <div class="form-row">
        <div class="form-group col-md-8">
           <input class="form-control" @bind="@_imageLink" placeholder="Link zu einem Bild" title="Bildlink"></input>
            <small id="imageInlineLinkHelp" class="form-text text-muted">
                Optional: Image in Text einfügen.
            </small>
        </div>
        <div class="col-md-2">
            <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => InsertImage())">Bild einfügen</button>
        </div>
        <div class="col-md-4">
            <UploadImage Title="@ArticleKey" Label="Article-Inserted-Image" OnFileUploaded="@((string uploadLink) => {_imageLink = uploadLink; })" ></UploadImage>
        </div>
     </div>
    @if (null != _article)
    {
        <div class="form-row">
            <div class="form-group col-md-8">
                <input class="form-control" @bind="@_article.ImageLink" placeholder="Link zu einem Header-Bild" title="Header-Bild"></input>
                <small id="imageLinkHelp" class="form-text text-muted">
                    Optional: Link zu einem Image das rechts oben angezeigt werden soll.
                </small>
            </div>
            <div class="col-md-4">
                <UploadImage Title="@ArticleKey" Label="Article-Header-Image" OnFileUploaded="@((string uploadLink) => {_article.ImageLink = uploadLink; })"></UploadImage>
            </div>
        </div>
     }
}

@code {
    [Parameter]
    public string ArticleKey { get; set; } = String.Empty;
    [Parameter]
    public string ImageMaxHeight { get; set; } = "100%";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    private Article? _article = new Article();
    private bool _editMode = false;
    private BlazoredTextEditor? _htmlArticle;
    private string _imageLink = String.Empty;


    protected override async Task OnInitializedAsync()
    {
        AppStateStore.OnChange += ReadArticle;
        if (AppStateStore.ArticleCache.ContainsKey(ArticleKey))
        {
            _article = AppStateStore.ArticleCache[ArticleKey];
        }
        else
        {
            _article = await Api.GetArticle(ArticleKey);
            if (null != _article)
            {
                AppStateStore.ArticleCache[ArticleKey] = _article;
            }
        }
    }

    private async Task SaveArticle()
    {
        if (null != _article && null != _htmlArticle)
        {
            _article.ArticleText = await _htmlArticle.GetHTML();
            _article.ArticleKey = ArticleKey;
            await Api.WriteArticle(_article);
        }
        _editMode = false;
    }

    private void SwitchToEditMode()
    {
        _editMode = true;
    }
    private void Cancel()
    {
        _editMode = false;
    }
    private async void ReadArticle()
    {
        if (AppStateStore.ArticleCache.ContainsKey(ArticleKey))
        {
            _article = AppStateStore.ArticleCache[ArticleKey];
        }
        else
        {
            _article = await Api.GetArticle(ArticleKey);
            if (null != _article)
            {
                AppStateStore.ArticleCache[ArticleKey] = _article;
            }
        }
        StateHasChanged();
    }
    public async Task InsertImage()
    {
        if (!String.IsNullOrEmpty(_imageLink))
        {
            await _htmlArticle!.InsertImage(_imageLink); 
        }
    }
    public void Dispose()
    {
        AppStateStore.OnChange -= ReadArticle;
    }

}
