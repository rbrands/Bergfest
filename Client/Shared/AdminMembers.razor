@attribute [Authorize(Roles = "admin")]
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api

<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage"></BlazorApp.Client.Shared.NotificationMessage>

@if (null == _members)
{
    <p><em>Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" title="Neue Teilnehmer:in" @onclick=@(() => NewMember()) >Neue Teilnehmer:in anlegen</button>
    </p>
    <p>
        Anzahl Teilnehmer:innen: @_members.Count()
    </p>

    <table class="table table-sm table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Aktion</th>
                <th scope="col">Vorname</th>
                <th scope="col">Name</th>
                <th scope="col">Geschlecht</th>
                <th scope="col">Strava-Profil</th>
                <th scope="col">Token-Expiration</th>
            </tr>
        </thead>
        <tbody>
            @foreach (StravaAccess member in _members)
            {
                <tr>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditItem(member))"><span class="oi oi-pencil"></span></button>
                        <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem(member))"><span class="oi oi-trash"></span></button>
                    </td>
                    <td>@member.FirstName</td>
                    <td>@member.LastName</td>
                    <td>@member.Sex</td>
                    <td>
                        <a href="@member.GetAhtleteLink()" target="_blank" alt="Strava-Link" title="Strava-Profil @member.GetFullName()">
                            @if (!String.IsNullOrEmpty(member.ProfileImageLink))
                            {
                                <img src="@member.ProfileSmallImageLink" class="img-fluid" alt="Strava-Profil @member.GetFullName()" />
                            }
                            else
                            {
                                @member.GetAhtleteLink()
                            }
                        </a>
                    </td>
                    <td>@(member.StravaAuthorizationIsPending ? "Authorization noch offen" : member.ExpirationAt)</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    private NotificationMessage? _notificationMessage;
    IEnumerable<StravaAccess>? _members = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _members = await Api.GetUsers();
            if (null != _members)
            {
                _members = _members.OrderBy(m => m.FirstName);
            }
        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Daten können nicht gelesen werden: {ex.Message}");
        }
    }
    protected async Task DeleteItem(StravaAccess user)
    {
        if (null != Modal)
        {
            ModalResult result = await Confirm.ShowDialog(Modal, "User löschen?", "Soll die Benutzer:in wirklich gelöscht werden?");
            if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
            {
                return;
            }
            await Api.DeleteUser(user);
            _members = await Api.GetUsers();
        }
    }
    protected async Task EditItem(StravaAccess user)
    {
        if (null != Modal)
        {
            ModalResult result = await EditMember.Show(Modal, user);
            _members = await Api.GetUsers();
        }
    }

    protected async Task NewMember()
    {
        if (null != Modal)
        {
            ModalResult result = await EditMember.Show(Modal, null);
            _members = await Api.GetUsers();
        }
    }


}
