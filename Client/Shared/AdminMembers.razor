@attribute [Authorize(Roles = "admin")]
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api

<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage"></BlazorApp.Client.Shared.NotificationMessage>

@if (null == _members)
{
    <p><em>Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" title="Neue Teilnehmer:in" @onclick=@(() => NewMember()) >Neue Teilnehmer:in anlegen</button>
    </p>
    <p>
        Anzahl Teilnehmer:innen: @_members.Count()
    </p>

    <div class="grid" tabindex="-1">
        <QuickGrid Items="@_filteredMembers" Virtualize="true" Class="table table-sm table-striped table-bordered">
            <TemplateColumn Title="Aktion" Class="action">
                <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditItem(context))"><span class="oi oi-pencil"></span></button>
                <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem(context))"><span class="oi oi-trash"></span></button>
            </TemplateColumn>
            <PropertyColumn Title="Vorname" Property="@(m => m.FirstName)" Sortable="true" Class="search-box">
                <ColumnOptions>
                    <input type="search" class="form-control" autofocus @bind="FirstNameFilter" @bind:event="oninput" placeholder="Vorame..." />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Name" Property="@(m => m.LastName)" Sortable="true" Class="search-box">
                <ColumnOptions>
                    <input type="search" class="form-control" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="Nachame..." />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Geschlecht" Property="@(m => m.Sex)" Sortable="false" />
            <TemplateColumn Title="Strava-Profil">
                <a href="@context.GetAhtleteLink()" target="_blank" alt="Strava-Link" title="Strava-Profil @context.GetFullName()">
                    @if (!String.IsNullOrEmpty(context.ProfileImageLink))
                    {
                        <img src="@context.ProfileSmallImageLink" class="img-fluid" alt="Strava-Profil @context.GetFullName()" />
                    }
                    else
                    {
                        @context.GetAhtleteLink()
                    }
                </a>
            </TemplateColumn>
            <TemplateColumn Title="Token-Gültigkeit" Sortable="true" SortBy="@(GridSort<StravaAccess>.ByAscending(m => m.ExpirationAt))">
                @(context.StravaAuthorizationIsPending ? "Authorization noch offen" : context.ExpirationAt)
            </TemplateColumn>
        </QuickGrid>
    </div>
}


@code {
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    private NotificationMessage? _notificationMessage;
    private IQueryable<StravaAccess>? _members = null;
    private string _nameFilter = string.Empty;
    private string _firstNameFilter = string.Empty;
    private string NameFilter
    {
        get => _nameFilter;
        set
        {
            _nameFilter = value;
            FilterLastName(); 
        }
    }
    private string FirstNameFilter
    {
        get => _firstNameFilter;
        set
        {
            _firstNameFilter = value;
            FilterFirstName(); 
        }
    }
    private IQueryable<StravaAccess>? _filteredMembers = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _members = await Api.GetUsers();
            if (null != _members)
            {
                _filteredMembers = _members.OrderBy(m => m.FirstName);
            }
        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Daten können nicht gelesen werden: {ex.Message}");
        }
    }
    protected async Task DeleteItem(StravaAccess user)
    {
        if (null != Modal)
        {
            ModalResult result = await Confirm.ShowDialog(Modal, "User löschen?", "Soll die Benutzer:in wirklich gelöscht werden?");
            if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
            {
                return;
            }
            await Api.DeleteUser(user);
            _members = await Api.GetUsers();
        }
    }
    protected async Task EditItem(StravaAccess user)
    {
        if (null != Modal)
        {
            ModalResult result = await EditMember.Show(Modal, user);
            _members = await Api.GetUsers();
        }
    }

    protected async Task NewMember()
    {
        if (null != Modal)
        {
            ModalResult result = await EditMember.Show(Modal, null);
            _members = await Api.GetUsers();
        }
    }
    protected void FilterLastName()
    {
        _filteredMembers = _members?.Where(m => m.LastName.StartsWith(_nameFilter, StringComparison.CurrentCultureIgnoreCase));       
    }
    protected void FilterFirstName()
    {
        _filteredMembers = _members?.Where(m => m.FirstName.StartsWith(_firstNameFilter, StringComparison.CurrentCultureIgnoreCase));       
    }


}
