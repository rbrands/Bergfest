@attribute [Authorize(Roles = "admin")]
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api

<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage"></BlazorApp.Client.Shared.NotificationMessage>

@if (null == _efforts)
{
    <p><em>Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <table class="table table-sm table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Aktion</th>
                <th scope="col">Datum</th>
                <th scope="col">Segment-Name</th>
                <th scope="col">Sportler:in</th>
                <th scope="col">Geschlecht</th>
                <th scope="col">Zeit (m)</th>
                <th scope="col">Link</th>
            </tr>
        </thead>
        <tbody>
            @foreach (StravaSegmentEffort effort in _efforts)
            {
                <tr>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem(effort))"><span class="oi oi-trash"></span></button>
                    </td>
                    <td>@effort.StartDateLocal</td>
                    <td>@effort.SegmentName</td>
                    <td>
                        <a href="@effort.GetAhtleteLink()" target="_blank" alt="Sportlerlink">@effort.AthleteName</a>
                    </td>
                    <td>@effort.AthleteSex</td>
                    <td>@TimeSpan.FromSeconds(effort.ElapsedTime).ToString(@"hh\:mm\:ss")</td>
                    <td><a href="@effort.GetActivitySegmentLink()" target="_blank" alt="Strava-Link">@(effort.ActivityName ?? effort.GetActivitySegmentLink())</a></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    private NotificationMessage? _notificationMessage;
    IEnumerable<StravaSegmentEffort>? _efforts = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _efforts = await Api.GetSegmentsEfforts();
        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Daten können nicht gelesen werden: {ex.Message}");
        }
    }
    protected async Task DeleteItem(StravaSegmentEffort effort)
    {
        if (null != Modal)
        {
            ModalResult result = await Confirm.ShowDialog(Modal, "Segment-Leistung löschen?", "Soll die Segmentleistung wirklich gelöscht werden?");
            if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
            {
                return;
            }
            await Api.DeleteSegmentEffort(effort);
            _efforts = await Api.GetSegmentsEfforts();
        }
    }
}
