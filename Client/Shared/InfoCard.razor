@using System.Linq
@using System.Collections.Generic
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header">
        <em>
            @Info.HeaderTitle
        </em>
    </div>
    @if (!String.IsNullOrEmpty(Info.LinkImage))
    {
        <a href="@(Info.Link ?? "#")">
            <img class="card-img-top" src="@Info.LinkImage" alt="@Info.LinkTitle">
        </a>
    }
    <div class="card-body overflow-auto" style="max-height:500px">
        @if (!String.IsNullOrEmpty(Info.SubTitle))
        {
            <h6 class="text-muted card-subtitle mb-2">@Info.SubTitle</h6>
        }
        @if (!String.IsNullOrEmpty(Info.Title))
        {
            <h5 class="card-title">@Info.Title</h5>
        }
        <p class="card-text">
            <div>
                @((MarkupString)Info.InfoContent)
            </div>
        </p>
        @if (null != _challenge)
        {
            <ChallengeRanking Challenge="@_challenge"></ChallengeRanking>
        }
        <hr />
        @if (!String.IsNullOrEmpty(Info.Link))
        {
            <a href="@Info.Link" class="card-link">@Info.LinkTitle</a>
        }
    </div>
    <div class="card-footer">
        <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zur InfoBox">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <div class="btn-group mr-2" role="group" aria-label="Ändern">
                        <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => Edit())"><span class="oi oi-pencil"></span></button>
                        <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem())"><span class="oi oi-trash"></span></button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public InfoItem Info { get; set; } = new InfoItem();
    [Parameter]
    public EventCallback OnReload { get; set; }
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    public StravaSegmentChallenge? _challenge;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(Info.ChallengeId))
        {
            _challenge = await Api.GetChallenge(Info.ChallengeId);
        }
    }
    protected async Task DeleteItem()
    {
        if (null != Modal)
        {
            ModalResult result = await Confirm.ShowDialog(Modal, "Info löschen?", "Soll die InfoBox wirklich gelöscht werden?");
            if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
            {
                return;
            }
            await Api.DeleteInfoItem(Info);
            await Reload();
        }
    }
    private async Task Reload()
    {
        await OnReload.InvokeAsync();
    }
    protected async Task Edit()
    {
        if (null != Modal)
        {
            ModalResult result = await EditInfoItem.Show(Modal, Info);
            await Reload();
        }
    }

}
