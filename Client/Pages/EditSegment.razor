@page "/editsegment"
@page "/editsegment/{Id}"
@attribute [Authorize(Roles = "admin,segmentadmin")]
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@using Blazored.TextEditor
@using System.Text
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager


<h3>Segment editieren</h3>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

<EditForm Model="@_segmentToEdit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-10">
            <InputNumber id="segmentId" aria-describedby="segmentIdHelp" class="form-control" @bind-Value="_segmentId" placeholder="Segment-Id" title="Id des Segments" />
            <small id="segmentIdHelp" class="form-text text-muted">
                Die Id des Segments aus der URL der Form https://www.strava.com/segments/id
            </small>
        </div>
        <div class="form-group col-md-2">
            <div class="form-check">
                <button id="btnGetSegmentFromStrava" class="btn btn-primary" type="button" @onclick="@(() => GetSegmentFromStrava())">Segment lesen</button>
            </div>
        </div>
    </div>
    <div class="form-row">
        @if (null != _segmentOnStrava && _segmentOnStrava.SegmentId > 0)
        {
            <h4>@_segmentOnStrava?.SegmentName</h4>
            <a class="small" href="@_segmentOnStrava?.GetSegmentLink()" target="_blank">Segment auf Strava</a>
            <div class="list-group list-group-horizontal-md flex-fill">
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Ort</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.City</p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Distanz</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.GetDistanceAsText()</p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Höhenzunahme</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.Elevation.ToString("N0")<text>m</text></p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Steigung</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.AverageGrade.ToString("N2")%</p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Max. Steigung</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.MaximumGrade.ToString("N2")%</p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Bergkategorie</p>
                    <p class="h5 mb-0 mt-0">@_segmentOnStrava?.GetClimbCategoryLabel()</p>
                </div>
                <div class="list-group-item border-0">
                    <p class="small mb-0 text-muted">Beliebtheit</p>
                    <p class="fs-6 mb-0 mt-0">@_segmentOnStrava?.EffortCount.ToString("N0") Versuche von @_segmentOnStrava?.AthleteCount.ToString("N0") Personen</p>
                </div>
            </div>
        }
    </div>
</EditForm>
@code {
    [Parameter]
    public ulong Id { get; set; }
    private NotificationMessage? _notificationMessage;
    private NotificationMessage? _saveMessage;
    private StravaSegment _segmentToEdit = new StravaSegment();
    private StravaSegment? _segmentOnStrava = new StravaSegment();
    private int _segmentId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Fehler: {ex.Message}");
            return;
        }
    }

    protected async Task GetSegmentFromStrava()
    {
        try
        {
            _segmentOnStrava = await Api.GetSegmentFromStrava((ulong)_segmentId);
        }
        catch (Exception ex)
        {
            string message = ex.Message;
            if (null != ex.InnerException)
            {
                message = ex.InnerException.Message;
            }
            _notificationMessage?.ShowError($"Segmentdaten können nicht gelesen werden: {message}");
            return;
        }
    }

}
