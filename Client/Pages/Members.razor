@page "/members"
@attribute [Authorize(Roles = "admin")]
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager

<h3>Mitgliederverwaltung</h3>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage"></BlazorApp.Client.Shared.NotificationMessage>

@if (null == _members)
{
    <p><em>Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <table class="table table-sm table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Aktion</th>
                <th scope="col">Vorname</th>
                <th scope="col">Name</th>
                <th scope="col">Geschlecht</th>
                <th scope="col">Link</th>
                <th scope="col">Token-Expiration</th>
            </tr>
        </thead>
        <tbody>
            @foreach (StravaAccess member in _members)
            {
                <tr>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem(member))"><span class="oi oi-trash"></span></button>
                    </td>
                    <td>@member.FirstName</td>
                    <td>@member.LastName</td>
                    <td>@member.Sex</td>
                    <td><a href="@member.GetAhtleteLink()" target="_blank" alt="Strava-Link">@member.GetAhtleteLink()</a></td>
                    <td>@member.ExpirationAt</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    private NotificationMessage? _notificationMessage;
    IEnumerable<StravaAccess>? _members = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _members = await Api.GetUsers();
        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Daten können nicht gelesen werden: {ex.Message}");
        }
    }
    protected async Task DeleteItem(StravaAccess user)
    {
        if (null != Modal)
        {
            ModalResult result = await Confirm.ShowDialog(Modal, "User löschen?", "Soll die Benutzer:in wirklich gelöscht werden?");
            if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
            {
                return;
            }
            // await Api.DeleteUser(user);
            _members = await Api.GetUsers();
        }
    }


}
