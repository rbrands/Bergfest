@page "/{Scope}"
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager

<PageTitle>
    Bergfest - Challenge
</PageTitle>

@if (null == _challenge)
{
    <p><em>Daten werden geladen...</em></p>
}
else
{
    <div class="m-2 p-4 bg-light border">
        <h2>@_challenge.ChallengeTitle</h2>
        <div class="overflow-auto" style="max-height: 800px">
            @((MarkupString)_challenge.Description)
        </div>
        <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zum Segment">
            <AuthorizeView Roles="admin,segmentadmin">
                <Authorized>
                    <div class="btn-group mr-2" role="group" aria-label="Ändern">
                        <a class="btn btn-sm btn-outline-secondary" title="Ändern" href=@($"/editchallenge/{_challenge.Id}")><span class="oi oi-pencil"></span></a>
                        <button class="btn btn-sm btn-outline-secondary" title="Löschen"><span class="oi oi-trash"></span></button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

@if (null != _challenge)
{
    <div class="row">
        <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
            <ChallengSummaryCard Challenge="_challenge"></ChallengSummaryCard>
        </div>
        @foreach (var s in _challenge.Segments.OrderBy(s => s.Value.Distance))
        {
            <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                <ChallengeSegmentCard Challenge="_challenge" Segment="s.Value" Efforts="_challengeEfforts"></ChallengeSegmentCard>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string Scope { get; set; } = String.Empty;
    private NotificationMessage? _notificationMessage;
    private StravaSegmentChallenge? _challenge;
    private IEnumerable<ChallengeSegmentEffort>? _challengeEfforts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _challenge = await Api.GetChallengeByTitle(Scope);
            if (null == _challenge)
            {
                throw new Exception($"Ups, es gibt keine Challenge mit dem Titel {Scope}");
            }
            ChallengeWithEfforts challengeWithEfforts = await Api.GetChallengeSegmentEfforts(_challenge.Id);
            _challengeEfforts = challengeWithEfforts.Efforts;
            _challenge = challengeWithEfforts.Challenge;
        }
        catch (Exception ex)
        {
            _notificationMessage!.ShowError($"Fehler: {ex.Message}");
            return;
        }
    }

}