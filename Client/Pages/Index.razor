@page "/"
@page "/withtag/{Tag}"
@page "/scope/{Scope}"
@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager

<PageTitle>
    Bergfest
</PageTitle>

<div class="p-4 bg-light border">
    <EditArticle ArticleKey="Index" ImageMaxHeight="8em">
        <h2>Cols und Sprints</h2>
        <p>
            Leistungen auf den Lieblingssegmenten.
        </p>
    </EditArticle>
</div>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

@if (null == _segments)
{
    <p><em>Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <p>
        <a class="btn-link" title="Strava Connect" href="/authorize"><img class="img-fluid" style="max-height:3em" src="/images/btn_strava_connectwith_orange@2x.png" alt="Strava Connect Button" /></a>
        <button class="btn btn-primary" title="Reload" @onclick="@(() => Reload())"><i class="bi-repeat"></i></button>
        <a class="btn btn-primary" title="Meine Segment-Leistungen" alt="Segment-Leistungen" href="/myefforts"><i class="bi-graph-up-arrow"></i></a>
        <a class="btn btn-primary" title="Aktivität nachreichen" alt="Aktivität nachreichen" href="/myactivity"><i class="bi-envelope-open-fill"></i></a>
        <AuthorizeView Roles="admin,segmentadmin">
            <Authorized>
                <a class="btn btn-primary" href=@($"editsegment") title="Segment anlegen">Segment anlegen</a>
            </Authorized>
        </AuthorizeView>
    </p>
    @if (!String.IsNullOrEmpty(Tag))
    {  
        <h5>Segmente mit Tag #@Tag</h5>
    } else if (!String.IsNullOrEmpty(Scope))
    {
        <h5>Segmente in Sammlung "@Scope"</h5>
    }
    <div class="row">
        @if (null != _infoItems && String.IsNullOrEmpty(Tag) && String.IsNullOrEmpty(Scope))
        {
            @foreach (var info in _infoItems.Where(i => i.OrderId < 0))
            {
                <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                    <InfoCard Info="@info" OnReload="@(() => Reload())"></InfoCard>
                </div>
            }
        }
        @foreach (StravaSegmentWithEfforts segment in _segments)
        {
            <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                <SegmentCard SegmentWithEfforts="@segment" OnReload="Reload"></SegmentCard>
            </div>
        }
        @if (null != _infoItems && String.IsNullOrEmpty(Tag) && String.IsNullOrEmpty(Scope))
        {
            @foreach (var info in _infoItems.Where(i => i.OrderId >= 0))
            {
                <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                    <InfoCard Info="@info" OnReload="@(() => Reload())"></InfoCard>
                </div>
            }
        }
    </div>
}
<AuthorizeView Roles="admin,segmentadmin">
    <Authorized>
        @if (null != _hiddenSegments && _hiddenSegments.Any())
        {
            <hr />
            <h4>Segmentbibliothek</h4>
            <p>Die folgenden Segmente werden momentan nicht angezeigt.</p>
            <div class="row">
                @foreach (StravaSegmentWithEfforts segment in _hiddenSegments)
                {
                    <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                        <SegmentCard SegmentWithEfforts="@segment" OnReload="Reload"></SegmentCard>
                    </div>
                }
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? Tag { get; set; }
    [Parameter]
    public string? Scope { get; set; }
    private NotificationMessage? _notificationMessage;
    IEnumerable<StravaSegmentWithEfforts>? _segments = null;
    IEnumerable<StravaSegmentWithEfforts>? _hiddenSegments = null;
    IEnumerable<InfoItem>? _infoItems = null;


    protected override async Task OnParametersSetAsync()
    {
        await Reload();
    }

    private async Task Reload()
    {
        try
        {
            _notificationMessage?.Hide();
            IEnumerable<StravaSegmentWithEfforts> segmentsFromDb;
            if (!String.IsNullOrEmpty(Scope))
            {
                segmentsFromDb = await Api.GetSegmentsWithEffortsForScope(Scope);
            }
            else
            {
                segmentsFromDb = await Api.GetSegmentsWithEfforts(Tag);
            }
            _segments = segmentsFromDb.Where(s => s.StravaSegment.DisplayEnabled);
            _hiddenSegments = segmentsFromDb.Where(s => !s.StravaSegment.DisplayEnabled);
            _infoItems = await Api.GetInfoItems();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _notificationMessage?.ShowError($"Fehler: {ex.Message}");
        }
    }

}
